Analysis of Algorithms:

Analysis of Algorithms is the determination of the amount of time and space resource required 
to execute it. Usually, the efficiency or running time of an algorithm is stated as a 
function relating the input length to the number of steps, known as time complexity 
or volume of memory known as space complexity.

Asymptotic Analysis of Algorithms:

Refers defining the mathematical boundation/framing of its runtime performance. 
Evaluate the performance of an algorithm in terms of input size.

Linear and Constant Complexity

Analysis Types:

1. Best case
2. Average Case
3. Worst Case

Asymptotic Notation:

1. Big O: worst case : Upper bound
2. Big - Omega: best case : Lower bound
3. small - o: worst case : Upper bound
4. Small - omega(w) : best case : Lower bound
5. Theta : average case

1. Linear Search: Done
2. Binary Search

0  	1  2   3   4  5   	6
1, 	4, 6, 10, 15, 25, 	30
first				last

n = 7
search = 4, 15
first = 0;
last = n - 1 = 7 - 1 = 6

middle = (first + last) / 2; = (0 + 6)/2; = 3

3 cases:

1. if(arr[middle] == search), 10 == 4, false, 4 == 4, true, 25 == 15, false, 15 == 15, true

2. if(arr[middle] > search), 10 > 4
	last = middle - 1; = 2
	last = middle - 1; = 4

	middle = (first + last) / 2 = (0+2)/2 = 1
	middle = (first + last) / 2 = (4+4)/2 = 4

3. if(arr[middle] < search), 10 < 15
	first = middle + 1 = 4

	middle = (first + last) / 2 = (4 + 6)/2 = 5



	

	




















